@ARTICLE{undefined_null,title={AI for Low-Code for AI},year={null},author={},doi={10.1145/3640543.3645203},pmid={null},pmcid={null},mag_id={null},journal={null},abstract={null}}
@ARTICLE{Khorram_2020,title={Challenges & opportunities in low-code testing},year={2020},author={Faezeh Khorram and Faezeh Khorram and Jean-Marie Mottu and Jean-Marie Mottu and Gerson Sunyé and Gerson Sunyé},doi={10.1145/3417990.3420204},pmid={null},pmcid={null},mag_id={3095441296},journal={null},abstract={Low-code is a growing development approach supported by many platforms. It fills the gap between business and IT by supporting the active involvement of non-technical domain experts, named Citizen Developer, in the application development lifecycle.Low-code introduces new concepts and characteristics. However, it is not investigated yet in academic research to point out the existing challenges and opportunities when testing low-code software. This shortage of resources motivates this research to provide an explicit definition to this area that we call it Low-Code Testing.In this paper, we initially conduct an analysis of the testing components of five commercial Low-Code Development Platforms (LCDP) to present low-code testing advancements from a business point of view. Based on the low-code principles as well as the result of our analysis, we propose a feature list for low-code testing along with possible values for them. This feature list can be used as a baseline for comparing low-code testing components and as a guideline for building new ones. Accordingly, we specify the status of the testing components of investigated LCDPs based on the proposed features. Finally, the challenges of low-code testing are introduced considering three concerns: the role of citizen developer in testing, the need for high-level test automation, and cloud testing. We provide references to the state-of-the-art to specify the difficulties and opportunities from an academic perspective. The results of this research can be used as a starting point for future research in low-code testing area.}}
@ARTICLE{Berent_2023,title={Software Tools for Decoding Quantum Low-Density Parity-Check Codes},year={2023},author={Lucas Berent and Lukas Burgholzer and Robert Wille},doi={10.1145/3566097.3567934},pmid={null},pmcid={null},mag_id={4318685254},journal={null},abstract={Quantum Error Correction (QEC) is an essential field of research towards the realization of large-scale quantum computers. On the theoretical side, a lot of effort is put into designing error-correcting codes that protect quantum data from errors, which inevitably happen due to the noisy nature of quantum hardware and quantum bits (qubits). Protecting data with an error-correcting code necessitates means to recover the original data, given a potentially corrupted data set-a task referred to as decoding. It is vital that decoding algorithms can recover error-free states in an efficient manner. While theoretical properties of recent QEC methods have been extensively studied, good techniques to analyze their performance in practically more relevant settings is still a widely unexplored area. In this work, we propose a set of software tools that allows to numerically experiment with so-called Quantum Low-Density Parity Check codes (QLDPC codes)-a broad class of codes, some of which have recently been shown to be asymptotically good. Based on that, we provide an implementation of a general decoder for QLDPC codes. On top of that, we propose an efficient heuristic decoder that tackles the runtime bottlenecks of the general QLDPC decoder while still maintaining comparable decoding performance. These tools eventually allow to confirm theoretical results around QLDPC codes in a more practical setting and showcase the value of software tools (in addition to theoretical considerations) for investigating codes for practical applications. The resulting tool, which is publicly available at https://github.com/lucasberent/qecc under the MIT license, is meant to provide a playground for the search for "practically good" quantum codes.}}
@ARTICLE{Leung_2018,title={Capacity approaching coding for low noise interactive quantum communication},year={2018},author={Debbie Leung and Debbie Leung and Debbie Leung and Debbie Leung and Ashwin Nayak and Ashwin Nayak and Ala Shayeghi and Ala Shayeghi and Dave Touchette and Dave Touchette and Penghui Yao and Penghui Yao and Nengkun Yu and Nengkun Yu},doi={10.1145/3188745.3188908},pmid={null},pmcid={null},mag_id={2808949610},journal={null},abstract={We consider the problem of implementing two-party interactive quantum communication over noisy channels, a necessary endeavor if we wish to fully reap quantum advantages for communication. For an arbitrary protocol with n messages, designed for noiseless qudit channels (where d is arbitrary), our main result is a simulation method that fails with probability less than 2−Θ (nє) and uses a qudit channel n (1 + Θ (√є)) times, of which an є fraction can be corrupted adversarially. The simulation is thus capacity achieving to leading order, and we conjecture that it is optimal up to a constant factor in the √є term. Furthermore, the simulation is in a model that does not require pre-shared resources such as randomness or entanglement between the communicating parties. Perhaps surprisingly, this outperforms the best known overhead of 1 + O(√є loglog1/є) in the corresponding classical model, which is also conjectured to be optimal [Haeupler, FOCS’14]. Our work also improves over the best previously known quantum result where the overhead is a non-explicit large constant [Brassard et al., FOCS’14] for low є.}}
@ARTICLE{undefined_null,title={A Low-Density Parity-Check Coding Scheme for LoRa Networking},year={null},author={},doi={10.1145/3665928},pmid={null},pmcid={null},mag_id={null},journal={null},abstract={null}}
@ARTICLE{Yang_2022,title={LLDPC},year={2022},author={Kang Yang and Wan Du},doi={10.1145/3560905.3568547},pmid={null},pmcid={null},mag_id={4317927916},journal={null},abstract={Low-density parity-check (LDPC) codes have been widely used for Forward Error Correction (FEC) in wireless networks because they can approach the capacity of wireless links with lightweight encoding complexity. Although LoRa networks have been developed for many applications, they still adopt simple FEC codes, i.e., Hamming codes, which provide limited FEC capacity, causing unreliable data transmissions and high energy consumption of LoRa nodes. To close this gap, this paper develops LLDPC, which realizes LDPC coding in LoRa networks. Three challenges are addressed. 1) LoRa employs Chirp Spread Spectrum (CSS) modulation, which only provides hard demodulation results without soft information. However, LDPC requires the Log-Likelihood Ratio (LLR) of each received bit for decoding. We develop an LLR extractor for LoRa CSS. 2) Some erroneous bits may have high LLRs (i.e., wrongly confident in their correctness), significantly affecting the LDPC decoding efficiency. We use symbol-level information to fine-tune the LLRs of some bits to improve the LDPC decoding efficiency. 3) Soft Belief Propagation (SBP) is typically used as the LDPC decoding algorithm. It involves heavy iterative computation, resulting in a long decoding latency, which prevents the gateway from sending timely an acknowledgment. We take advantage of recent advances in graph neural networks for fast belief propagation in LDPC decoding. Extensive simulations on a large-scale synthetic dataset and in-filed experiments reveal that LLDPC can extend the lifetime of the default LoRa by 86.7% and reduce the decoding latency of the SBP algorithm by 58.09×.}}
@ARTICLE{Alrabiah_2023,title={A Near-Cubic Lower Bound for 3-Query Locally Decodable Codes from Semirandom CSP Refutation},year={2023},author={Omar Alrabiah and Venkatesan Guruswami and Pravesh K. Kothari and Peter Manohar},doi={10.1145/3564246.3585143},pmid={null},pmcid={null},mag_id={4376639534},journal={null},abstract={A code C ∶ {0,1}k → {0,1}n is a q-locally decodable code (q-LDC) if one can recover any chosen bit bi of the message b ∈ {0,1}k with good confidence by randomly querying the encoding x = C(b) on at most q coordinates. Existing constructions of 2-LDCs achieve n = exp(O(k)), and lower bounds show that this is in fact tight. However, when q = 3, far less is known: the best constructions achieve n = exp(ko(1)), while the best known results only show a quadratic lower bound n ≥ Ω(k2/log(k)) on the blocklength.}}
@ARTICLE{Pérez-Delgado_2020,title={Towards a Quantum Software Modeling Language},year={2020},author={Carlos A. Pérez-Delgado and Carlos A. Pérez-Delgado and Héctor G. Pérez-González and Hector G. Perez-Gonzalez},doi={10.1145/3387940.3392183},pmid={null},pmcid={null},mag_id={3088196918},journal={null},abstract={We set down the principles behind a modeling language for quantum software. We present a minimal set of extensions to the well-known Unified Modeling Language (UML) that allows it to effectively model quantum software. These extensions are separate and independent of UML as a whole. As such they can be used to extend any other software modeling language, or as a basis for a completely new language. We argue that these extensions are both necessary and sufficient to model, abstractly, any piece of quantum software. Finally, we provide a small set of examples that showcase the effectiveness of the extension set.}}
@ARTICLE{Moin_2023,title={Model-Driven Quantum Federated Learning (QFL)},year={2023},author={Armin Moin and Atta Badii and Moharram Challenger},doi={10.1145/3594671.3594690},pmid={null},pmcid={null},mag_id={4366456813},journal={null},abstract={Recently, several studies have proposed frameworks for Quantum Federated Learning (QFL). For instance, the Google TensorFlow Quantum (TFQ) and TensorFlow Federated (TFF) libraries have been deployed for realizing QFL. However, developers, in the main, are not as yet familiar with Quantum Computing (QC) libraries and frameworks. A Domain-Specific Modeling Language (DSML) that provides an abstraction layer over the underlying QC and Federated Learning (FL) libraries would be beneficial. This could enable practitioners to carry out software development and data science tasks efficiently while deploying the state of the art in Quantum Machine Learning (QML). In this position paper, we propose extending existing domain-specific Model-Driven Engineering (MDE) tools for Machine Learning (ML) enabled systems, such as MontiAnna, ML-Quadrat, and GreyCat, to support QFL.}}
@ARTICLE{undefined_null,title={Model-Based Framework for Continuous Adaptation and Evolution of Quantum-Classical Hybrid Systems},year={null},author={},doi={10.1145/3660829.3660849},pmid={null},pmcid={null},mag_id={null},journal={null},abstract={null}}
@ARTICLE{Abreu_2021,title={Quantum Software: Model-driven or Search-driven? A Q-SE 2021 Workshop Report},year={2021},author={Rui Abreu and Rui Abreu and Shaukat Ali and Shaukat Ali and Tao Yue and Tao Yue and Michael Felderer and Michael Felderer and Iaakov Exman and Iaakov Exman},doi={10.1145/3485952.3485958},pmid={null},pmcid={null},mag_id={3210119215},journal={ACM Sigsoft Software Engineering Notes},abstract={Quantum Software is a formidable challenge. This is a conse- quence of a rst encounter between software, usually perceived as an engineering discipline, and quantum computing, an outgrowth of two complex and fundamental sciences: physics and computer science. However, Quantum Software is a signi cant creativity op- portunity. This short paper characterizes the unique opportunity, while keeping in mind the great challenge. It also stands as a re- port of a workshop (Q-SE 2021) exactly created to promote under- standing and trigger motivation to exploit this opportunity, while overcoming the challenge. Q-SE 2021 | the 2nd International Workshop on Quantum Software Engineering | was co-located with the 43rd International Conference on Software Engineering (ICSE 2021). Q-SE 2021 was virtually held on June 1 and June 2 of 2021.}}
@ARTICLE{Pérez-Castillo_2023,title={Generation of Classical-Quantum Code from UML models},year={2023},author={Ricardo Pérez-Castillo and Luis Jiménez-Navajas and Iván Cantalejo and M. Piattini},doi={10.1109/qce57702.2023.10202},pmid={null},pmcid={null},mag_id={null},journal={International Conference on Quantum Computing and Engineering},abstract={Quantum computing has gained a lot of interest in recent years, thanks to its ability to solve certain problems that classical computing cannot address. These applications will only be achieved through the development of quantum software. Thus, many organizations are starting projects to integrate this new software into their existing systems. Software modernization (as based on Model-Driven Engineering) can be used to migrate from/to the so-called hybrid software systems, which integrate classical and quantum software. In that process, reverse engineering and restructuring phases have already been addressed, but the forward engineering phase for hybrid software has not yet been addressed. This paper presents a preliminary code generation technique from extended UML design models. It proposes an EGL transformation to generate Python and Qiskit code by integrating classical and quantum code. The transformation has been preliminarily validated with an example of application with the design model of a hybrid system for a financial web application. The implication of this work is that the software modernization process for hybrid software systems is completed, which facilitates the adoption of this new paradigm in the industry.}}
@ARTICLE{Gemeinhardt_2021,title={Towards Model-Driven Quantum Software Engineering},year={2021},author={Felix Gemeinhardt and Felix Gemeinhardt and Antonio Garmendía and Antonio Garmendia and Manuel Wimmer and Manuel Wimmer},doi={10.1109/q-se52541.2021.00010},pmid={null},pmcid={null},mag_id={3161888066},journal={Workshop on Quantum Software Engineering},abstract={Quantum technologies are emerging. Dedicated languages for programming Quantum machines are emerging as well and already used in different settings. Orthogonal to this development, Model-Driven Engineering (MDE) is explored to ease the development of software systems by applying modeling techniques such as Domain-Specific Modeling Languages and generative techniques such as code generation. In this position paper, we argue for a dedicated research line which deals with the exploration of how MDE may be applied for Quantum technologies. This combination would allow to speed- up the development of Quantum software, open the door for domain experts to utilize Quantum technologies, and may provide an additional abstraction layer over existing Quantum hardware architectures and programming languages. We outline several research challenges which we derived from a demonstration case of how to exploit domain-specific modeling for social network analysis on Quantum technologies.}}
@ARTICLE{Gemeinhardt_2023,title={Model-Driven Optimization for Quantum Program Synthesis with MOMoT},year={2023},author={Felix Gemeinhardt and Martin Eisenberg and Stefan Klikovits and Manuel Wimmer},doi={10.1109/models-c59198.2023.00100},pmid={null},pmcid={null},mag_id={null},journal={2023 ACM/IEEE International Conference on Model Driven Engineering Languages and Systems Companion (MODELS-C)},abstract={In the realm of classical software engineering, model-driven optimization has been widely used for different problems such as (re)modularization of software systems. In this paper, we investigate how techniques from model-driven optimization can be applied in the context of quantum software engineering. In quantum computing, creating executable quantum programs is a highly non-trivial task which requires significant expert knowledge in quantum information theory and linear algebra. Although different approaches for automated quantum program synthesis exist—e.g., based on reinforcement learning and genetic programming—these approaches represent tailor-made solutions requiring dedicated encodings for quantum programs. This paper applies the existing model-driven optimization approach MOMoT to the problem of quantum program synthesis. We present the resulting platform for experimenting with quantum program synthesis and present a concrete demonstration for a well-known Quantum algorithm.}}
@ARTICLE{Jiménez-Navajas_2023,title={Reverse Engineering of OpenQASM3 Quantum Programs to KDM Models},year={2023},author={Luis Jiménez-Navajas and Ricardo Pérez‐Castillo and Mario Piattini},doi={10.5220/0011963000003464},pmid={null},pmcid={null},mag_id={4367021066},journal={International Conference on Evaluation of Novel Approaches to Software Engineering},abstract={null}}
@ARTICLE{Murillo_2024,title={Challenges of Quantum Software Engineering for the Next Decade: The Road Ahead},year={2024},author={J. M. Murillo and J. García-Alonso and E. Moguel and Johanna Barzen and F. Leymann and Shaukat Ali and T. Yue and Paolo Arcaini and Ricardo P'erez and Ignacio Garc'ia-Rodr'iguez de Guzm'an and Mario Piattini and Antonio Ruiz-Cort'es and Antonio Brogi and Jianjun Zhao and Andriy V. Miranskyy and Manuel Wimmer},doi={10.48550/arxiv.2404.06825},pmid={null},pmcid={null},mag_id={null},journal={arXiv.org},abstract={As quantum computers evolve, so does the complexity of the software that they can run. To make this software efficient, maintainable, reusable, and cost-effective, quality attributes that any industry-grade software should strive for, mature software engineering approaches should be applied during its design, development, and operation. Due to the significant differences between classical and quantum software, applying classical software engineering solutions to quantum software is difficult. This resulted in the birth of Quantum Software Engineering as a discipline in the contemporary software engineering landscape. In this work, a set of active researchers is currently addressing the challenges of Quantum Software Engineering and analyzing the most recent research advances in this domain. This analysis is used to identify needed breakthroughs and future research directions for Quantum Software Engineering.}}
@ARTICLE{Alonso_2023,title={A Graph-Based Approach for Modelling Quantum Circuits},year={2023},author={Diego Alonso and Pedro Sánchez and Bárbara Álvarez},doi={10.3390/app132111794},pmid={null},pmcid={null},mag_id={4388098179},journal={Applied Sciences},abstract={A crucial task for the systematic application of model-driven engineering techniques in the development of quantum software is the definition of metamodels, as a first step towards automatic code generation and integration with other tools. The importance is even greater when considering recent work where the first extensions to UML for modelling quantum circuits are emerging and the characterisation of these extensions in terms of their suitability for a model-driven approach becomes unavoidable. After reviewing the related work, this article proposes a unified metamodel for modelling quantum circuits, together with five strategies for its use and some examples of its application. The article also provides a set of constraints for using the identified strategies, a set of procedures for transforming the models between the strategies, and an analysis of the suitability of each strategy for performing common tasks in a model-driven quantum software development environment. All of these resources will enable the quantum software community to speak the same language and use the same set of abstractions, which are key to furthering the development of tools to be built as part of future model-driven quantum software development frameworks.}}
@ARTICLE{Gemeinhardt_null,title={A Model-Driven Framework for Composition-Based Quantum Circuit Design},year={null},author={Felix Gemeinhardt and Antonio Garmendía and Manuel Wimmer and R. Wille},doi={null},pmid={null},pmcid={null},mag_id={null},journal={null},abstract={26}}
@ARTICLE{Ahmad_2023,title={A Reference Architecture for Quantum Computing as a Service},year={2023},author={Aakash Ahmad and Ahmed B. Altamimi and Jamal M. Aqib},doi={10.48550/arxiv.2306.04578},pmid={null},pmcid={null},mag_id={4379958529},journal={Journal of King Saud University: Computer and Information Sciences},abstract={Quantum computers (QCs) aim to disrupt the status-quo of computing -- replacing traditional systems and platforms that are driven by digital circuits and modular software -- with hardware and software that operates on the principle of quantum mechanics. QCs that rely on quantum mechanics can exploit quantum circuits (i.e., quantum bits for manipulating quantum gates) to achieve "quantum computational supremacy" over traditional, i.e., digital computing systems. Currently, the issues that impede mass-scale adoption of quantum systems are rooted in the fact that building, maintaining, and/or programming QCs is a complex and radically distinct engineering paradigm when compared to challenges of classical computing and software engineering. Quantum service orientation is seen as a solution that synergises the research on service computing and quantum software engineering (QSE) to allow developers and users to build and utilise quantum software services based on pay-per-shot utility computing model. The pay-per-shot model represents a single execution of instruction on quantum processing unit and it allows vendors (e.g., Amazon Braket) to offer their QC platforms, simulators, software services etc. to enterprises and individuals who do not need to own or maintain quantum systems. This research contributes by 1) developing a reference architecture for enabling quantum computing as a service, 2) implementing microservices with the quantum-classic split pattern as an architectural use-case, and 3) evaluating the reference architecture based on feedback by 22 practitioners. In the QSE context, the research focuses on unifying architectural methods and service-orientation patterns to promote reuse knowledge and best practices to tackle emerging and futuristic challenges of architecting and implementing Quantum Computing as a Service (QCaaS).}}
@ARTICLE{Lethbridge_2021,title={Low-Code Is Often High-Code, So We Must Design Low-Code Platforms to Enable Proper Software Engineering},year={2021},author={Timothy C. Lethbridge and Timothy C. Lethbridge},doi={10.1007/978-3-030-89159-6_14},pmid={null},pmcid={null},mag_id={3206914484},journal={Leveraging Applications of Formal Methods},abstract={The concept of low-code (and no-code) platforms has been around for decades, even before the term was used. The idea is that applications on these platforms can be built by people with less technical expertise than a professional programmer, yet can leverage powerful technology such as, for example, for databases, financial analysis, web development and machine learning. However, in practice, software written on such platforms often accumulates large volumes of complex code, which can be worse to maintain than in traditional languages because the low-code platforms tend not to properly support good engineering practices such as version control, separation of concerns, automated testing and literate programming. In this paper we discuss experiences with several low-code platforms and provide suggestions for directions forward towards an era where the benefits of low-code can be obtained without accumulation of technical debt. Our recommendations focus on ensuring low-code platforms enable scaling, understandability, documentability, testability, vendor-independence, and the overall user experience for developers those end-users who do some development.}}
@ARTICLE{Armin_2021,title={MDE4QAI: Towards Model-Driven Engineering for Quantum Artificial Intelligence},year={2021},author={Moin, Armin and Armin Moin and Challenger, Moharram and Moharram Challenger and Badii, Atta and Atta Badii and Günnemann, Stephan and Stephan Günnemann},doi={10.18420/inf2022_95},pmid={null},pmcid={null},mag_id={4307379041},journal={Cornell University - arXiv},abstract={Over the past decade, Artificial Intelligence (AI) has provided enormous new possibilities and opportunities, but also new demands and requirements for software systems. In particular, Machine Learning (ML) has proven useful in almost every vertical application domain. In the decade ahead, an unprecedented paradigm shift from classical computing towards Quantum Computing (QC), with perhaps a quantum-classical hybrid model, is expected. We argue that the Model-Driven Engineering (MDE) paradigm can be an enabler and a facilitator, when it comes to the quantum and the quantum-classical hybrid applications. This includes not only automated code generation, but also automated model checking and verification, as well as model analysis in the early design phases, and model-to-model transformations both at the design-time and at the runtime. In this paper, the vision is focused on MDE for Quantum AI, particularly Quantum ML for the Internet of Things (IoT) and smart Cyber-Physical Systems (CPS) applications.}}
@ARTICLE{Amato_2023,title={Quantumoonlight: A Low-Code Platform to Experiment with Quantum Machine Learning},year={2023},author={Francesco Amato and Matteo Cicalese and Luca Contrasto and Giacomo Cubicciotti and Gerardo D’Ambola and Antonio La Marca and Giuseppe Pagano and Fiorentino Tomeo and Gennaro Alessio Robertazzi and Gabriele Vassallo and Giovanni Acampora and Autilia Vitiello and Gemma Catolino and Giammaria Giordano and Stefano Lambiase and Valeria Pontillo and Giulia Sellitto and Filomena Ferrucci and Fabio Palomba},doi={10.2139/ssrn.4333822},pmid={null},pmcid={null},mag_id={4320011369},journal={SoftwareX},abstract={null}}
@ARTICLE{Alonso_2022,title={Engineering the development of quantum programs: Application to the Boolean satisfiability problem},year={2022},author={Diego Alonso and Diego Alonso and Pedro Sánchez and Pedro Sánchez and Francisco Sánchez-Rubio and Francisco Sánchez-Rubio},doi={10.1016/j.advengsoft.2022.103216},pmid={null},pmcid={null},mag_id={4290991520},journal={Advances in Engineering Software},abstract={• New method for automatic generation of quantum code from SAT equations. • New metamodel for representing quantum circuits. • Formulas for calculating the number of required quantum elements from SAT equations are provided. • Flexible and expandable architecture to target multiple quantum languages. • Successful validation of generated Qiskit code in IBM Quantum infrastructure. The development of quantum programs is becoming a reality due to the rapid advancement of quantum computing. Over the past few years, a multitude of hardware platforms, algorithms, and programming languages have emerged to support this paradigm. By the very nature of Quantum Mechanics principles, there is an enormous change of philosophy when building quantum programs, which operate in a probabilistic space, unlike the deterministic behaviour shown by classical programming languages. These conceptual differences can be overcome by using techniques and tools of Software Engineering. In this paper, we apply Model-Driven Engineering techniques in a systematic way to ease the generation of quantum programs and we apply it to solve the satisfiability problem, very important in many engineering domains like verification of discrete systems and test of integrated circuits. To that aim, we contribute with a metamodel for representing quantum circuits and a model-to-text transformation to generate working IBM Qiskit code. This model-driven infrastructure is employed to automatically generate quantum programs from SAT equations through a model-to-model transformation that embeds Grover’s algorithm. Besides, we provide formulas for calculating the number of required quantum elements from SAT equations, crucial in the current context of limited quantum resources. The interoperability with other tools and the extensibility to target additional quantum platforms is guaranteed thanks to the use of a model-based toolchain. We cover several usage scenarios to validate the approach, providing exemplary SAT equations, the generated Qiskit code and the results of executing this code in IBM Quantum infrastructure.}}
@ARTICLE{Polat_2024,title={Model-Driven Engineering for Quantum Programming: A Case Study on Ground State Energy Calculation},year={2024},author={Furkan Polat and Hasan Tuncer and Armin Moin and Moharram Challenger},doi={10.48550/arxiv.2405.17065},pmid={null},pmcid={null},mag_id={null},journal={arXiv.org},abstract={This study introduces a novel framework that brings together two main Quantum Programming methodologies, gate-based Quantum Computing and Quantum Annealing, by applying the Model-Driven Engineering principles. This aims to enhance the adaptability, design and scalability of quantum programs, facilitating their design and operation across diverse computing platforms. A notable achievement of this research is the development of a mapping method for programs between gate-based quantum computers and quantum annealers which can lead to the automatic transformation of these programs. Specifically, this method is applied to the Variational Quantum Eigensolver Algorithm and Quantum Anneling Ising Model, targeting ground state solutions. Finding ground-state solutions is crucial for a wide range of scientific applications, ranging from simulating chemistry lab experiments to medical applications, such as vaccine development. The success of this application demonstrates Model-Driven Engineering for Quantum Programming frameworks's practical viability and sets a clear path for quantum Computing's broader use in solving intricate problems.}}
@ARTICLE{Khan_2022,title={Software Architecture for Quantum Computing Systems - Asystematic Review},year={2022},author={Arif  Ali Khan and Arif Ali Khan and Aakash Ahmad and Aakash Ahmad and Muhammad Waseem and Muhammad Waseem and Peng Liang and Peng Liang and Mahdi Fahmideh and Mahdi Fahmideh and Tommi Mikkonen and Tommi Mikkonen and Pekka Abrahamsson and Pekka Abrahamsson},doi={10.2139/ssrn.4040490},pmid={null},pmcid={null},mag_id={4212804586},journal={Social Science Research Network},abstract={Quantum computing systems rely on the principles of quantum mechanics to perform a multitude of computationally challenging tasks more efficiently than their classical counterparts. The architecture of software-intensive systems can empower architects who can leverage architecture-centric processes, practices, description languages, etc., to model, develop, and evolve quantum computing software (quantum software for short) at higher abstraction levels. We conducted a systematic literature review (SLR) to investigate (i) architectural process, (ii) modeling notations, (iii) architecture design patterns, (iv) tool support, and (iv) challenging factors for quantum software architecture. Results of the SLR indicate that quantum software represents a new genre of software-intensive systems; however, existing processes and notations can be tailored to derive the architecting activities and develop modeling languages for quantum software. Quantum bits (Qubits) mapped to Quantum gates (Qugates) can be represented as architectural components and connectors that implement quantum software. Tool-chains can incorporate reusable knowledge and human roles (e.g., quantum domain engineers, quantum code developers) to automate and customize the architectural process. Results of this SLR can facilitate researchers and practitioners to develop new hypotheses to be tested, derive reference architectures, and leverage architecture-centric principles and practices to engineer emerging and next generations of quantum software.}}
@ARTICLE{Nguyen_2022,title={QFaaS: A Serverless Function-as-a-Service Framework for Quantum Computing},year={2022},author={H. T. Nguyen and Muhammad Usman and R. Buyya},doi={10.1016/j.future.2024.01.018},pmid={null},pmcid={null},mag_id={null},journal={Future generations computer systems},abstract={null}}
@ARTICLE{Beisel_2023,title={A Practical Introduction for Developing and Operating Hybrid Quantum Applications},year={2023},author={Martin Beisel and Felix Gemeinhardt and Marie Salm and Benjamin Weder},doi={10.1007/978-3-031-34444-2_36},pmid={null},pmcid={null},mag_id={4380838029},journal={International Conference on Web Engineering},abstract={With the increasing number of quantum computers available via the cloud, the research area of quantum software engineering is emerging. Its goal is the investigation of concepts and guidelines to develop and operate hybrid quantum applications, ensuring engineering principles such as modularity, reuse, and maintainability. In this tutorial, we provide an overview of state-of-the-art concepts and techniques in quantum computing, as well as quantum software engineering. It includes an introduction of selected essential quantum algorithms, limitations of current quantum computers, and a lifecycle for hybrid quantum applications. Furthermore, we show how the service-oriented development of hybrid quantum applications increases their modularity and reusability. Finally, we demonstrate the orchestration of the required classical and quantum programs using workflows and their automated deployment.}}
@ARTICLE{Jiménez-Navajas_2021,title={Kdm to uml model transformation for quantum software modernization},year={2021},author={Luis Jiménez-Navajas and Ricardo Pérez-Castillo and M. Piattini},doi={10.1007/978-3-030-85347-1_16},pmid={null},pmcid={null},mag_id={null},journal={Quality of Information and Communications Technology},abstract={null}}
@ARTICLE{Ali_2020,title={Modeling Quantum programs: challenges, initial results, and research directions},year={2020},author={Shaukat Ali and Shaukat Ali and Tao Yue and Tao Yue},doi={10.1145/3412451.3428499},pmid={null},pmcid={null},mag_id={3111197876},journal={APEQES@ESEC/SIGSOFT FSE},abstract={Quantum programming languages provide necessary constructs to program quantum computers. To write such programs, one needs to understand the characteristics of quantum computers such as superposition and entanglement, which are novel as compared to programming with classical computers. Understanding these characteristics requires an understanding of quantum physics. Thus, there is a need to build high-level modeling abstractions of quantum programs for software engineers who are used to program on classical computers to understand and model quantum programs at a high-level of abstraction and independent of quantum platforms. To this end, we present some ideas for developing such quantum software modeling languages, by presenting a conceptual model of quantum programs and an example of modeling the state-based behavior of quantum entanglement program. Moreover, we present some open issues in the area of modeling quantum programs.}}
@ARTICLE{Pérez-Castillo_2022,title={Design of classical-quantum systems with UML},year={2022},author={Ricardo Pérez-Castillo and Ricardo Pérez‐Castillo and Ricardo Pérez-Castillo and Mario Piattini and Mario Piattini},doi={10.1007/s00607-022-01091-4},pmid={null},pmcid={null},mag_id={4281827486},journal={Computing},abstract={Abstract Developers of the many promising quantum computing applications that currently exist are urging companies in many different sectors seriously consider integrating this new technology into their business. For these applications to function, not only are quantum computers required, but quantum software also. Accordingly, quantum software engineering has become an important research field, in that it attempts to apply or adapt existing methods and techniques (or propose new ones) for the analysis, design, coding, and testing of quantum software, as well as playing a key role in ensuring quality in large-scale productions. The design of quantum software nevertheless poses two main challenges: the modelling of software quantum elements must be done in high-level modelling languages; and the need to further develop so-called “hybrid information systems”, which combine quantum and classical software. To address these challenges, we first propose a quantum UML profile for analysing and designing hybrid information systems; we then demonstrate its applicability through various structural and behavioural diagrams such as use case, class, sequence, activity, and deployment. In comparison to certain other quantum domain-specific languages, this UML profile ensures compliance with a well-known international standard that is supported by many tools and is followed by an extensive community.}}
@ARTICLE{Gill_2024,title={Quantum Computing: Vision and Challenges},year={2024},author={S. Gill and Oktay Cetinkaya and Stefano Marrone and E. Combarro and Daniel Claudino and David Haunschild and Leon Schlote and Huaming Wu and Carlo Ottaviani and Xiaoyuan Liu and Sree Pragna Machupalli and Kamalpreet Kaur and Priyansh Arora and Ji Liu and Salman Shamshad and Ahmed Farouk and Houbing Herbert Song and Steve Uhlig and K. Ramamohanarao},doi={null},pmid={null},pmcid={null},mag_id={null},journal={null},abstract={The recent development of quantum computing, which makes use of entanglement, superposition, and other quantum fundamental concepts, has the ability to provide substantial processing advantages over traditional computing. These quantum features help solve many hard problems that cannot be solved with traditional computing methods. These problems are in areas like modeling quantum mechanics, logistics, making chemical-based advances, designing drugs, statistical science, sustainable energy, banking, reliable communication, and quantum chemical engineering. The last few years have witnessed remarkable advancements in quantum software and algorithm creation as well as quantum hardware research, which have significantly advanced the prospect of the realization of quantum computers. It would be helpful to have comprehensive literature research on this area to grasp the current status and find outstanding problems that require considerable attention from the research community working in the quantum computing industry. To better understand quantum computing, this paper examines the foundations and vision based on current research in this area. We discuss cutting-edge developments in quantum computer hardware advancement, and subsequent advances in quantum cryptography, quantum software, and high-scalability quantum computers. Many potential challenges and exciting new trends for quantum technology research and development are highlighted in this paper for a wider debate.}}
@ARTICLE{Jiménez-Navajas_2022,title={Transforming Quantum Programs in Kdm to Quantum Design Models in Uml},year={2022},author={Luis Jiménez-Navajas and Luis Jimenez-Navajas and Ricardo Pérez‐Castillo and Ricardo Perez-Castillo and Mario Piattini and Mario Piattini},doi={10.2139/ssrn.4074848},pmid={null},pmcid={null},mag_id={4226487002},journal={Social Science Research Network},abstract={null}}
@ARTICLE{Hurlburt_2021,title={Low-Code, No-Code, What's Under the Hood?},year={2021},author={George Hurlburt and George Hurlburt},doi={10.1109/mitp.2021.3123415},pmid={null},pmcid={null},mag_id={4200578813},journal={IT Professional},abstract={Low-code and no-code is everywhere. Where does that leave the enterprise-level IT professional? This edition of IT Professional reaffirms the role of the IT professional in a world where enterprise coders are being replaced by “citizen developers.”}}
@ARTICLE{Bocciarelli_2023,title={A Low-Code Approach for Simulation-Based Analysis of Process Collaborations},year={2023},author={Paolo Bocciarelli and Andrea D'Ambrogio},doi={10.1109/wsc60868.2023.10407452},pmid={null},pmcid={null},mag_id={null},journal={Online World Conference on Soft Computing in Industrial Applications},abstract={The simulation-based analysis of process collaborations introduces significant challenges, such as the ability to focus on the interchange of information and data without disclosing any internal details of collaboration participants’ processes. The use of distributed simulation (DS) provides good opportunities to face these challenges. However, properly using DS standards and technologies requires significant technical know-how and effort. This paper introduces a largely automated approach to carry out distributed simulations of process collaborations. The DS standard addressed by the paper is the High Level Architecture (HLA), which is used to analyze process collaborations specified by using the Business Process Model and Notation (BPMN). The degree of automation is obtained by using a low-code development paradigm based on automated model transformations that reduce the amount of manual effort required to code the HLA-based simulation. An example application is also discussed to underline the pros and cons of the proposed approach.}}
@ARTICLE{Piattini_2021,title={Toward a Quantum Software Engineering},year={2021},author={Mario Piattini and Mario Piattini and Mario Piattini and Manuel A. Serrano and Manuel Serrano and Ricardo Pérez‐Castillo and Ricardo Pérez-Castillo and Ricardo Pérez-Castillo and Guido Petersen and Guido Petersen and José Luis Hevia and Jose Luis Hevia},doi={10.1109/mitp.2020.3019522},pmid={null},pmcid={null},mag_id={3126913938},journal={IT Professional},abstract={Nowadays, we are at the dawn of a new age, the quantum era. Quantum computing is no longer a dream; it is a reality that needs to be adopted. But this new technology is taking its first steps, so we still do not have models, standards, or methods to help us in the creation of new systems and the migration of current ones. Given the current state of quantum computing, we need to go back to the path software engineering took in the last century to achieve the new golden age for quantum software engineering.}}
@ARTICLE{Khan_2023,title={Software architecture for quantum computing systems — A systematic review},year={2023},author={Arif Ali Khan and Aakash Ahmad and Muhammad Waseem and Peng Liang and Mahdi Fahmideh and Tommi Mikkonen and Pekka Abrahamsson},doi={10.1016/j.jss.2023.111682},pmid={null},pmcid={null},mag_id={4360602629},journal={null},abstract={Quantum computing systems rely on the principles of quantum mechanics to perform a multitude of computationally challenging tasks more efficiently than their classical counterparts. The architecture of software-intensive systems can empower architects who can leverage architecture-centric processes, practices, description languages to model, develop, and evolve quantum computing software (quantum software for short) at higher abstraction levels. We conducted a Systematic Literature Review (SLR) to investigate (i) architectural process, (ii) modelling notations, (iii) architecture design patterns, (iv) tool support, and (iv) challenging factors for quantum software architecture. Results of the SLR indicate that quantum software represents a new genre of software-intensive systems; however, existing processes and notations can be tailored to derive the architecting activities and develop modelling languages for quantum software. Quantum bits (Qubits) mapped to Quantum gates (Qugates) can be represented as architectural components and connectors that implement quantum software. Tool-chains can incorporate reusable knowledge and human roles (e.g., quantum domain engineers, quantum code developers) to automate and customise the architectural process. Results of this SLR can facilitate researchers and practitioners to develop new hypotheses to be tested, derive reference architectures, and leverage architecture-centric principles and practices to engineer emerging and next generations of quantum software.}}
@ARTICLE{Akbar_2022,title={Classical to Quantum Software Migration Journey Begins: A Conceptual Readiness Model},year={2022},author={Muhammad Azeem Akbar and Saima Rafi and Arif Ali Khan},doi={10.1007/978-3-031-21388-5_42},pmid={null},pmcid={null},mag_id={4312751326},journal={null},abstract={With recent advances in the development of more powerful quantum computers, the research area of quantum software engineering is emerging. Quantum software plays a critical role in exploiting the full potential of quantum computing systems. As a result, it has been drawing increasing attention recently to provide concepts, principles, and guidelines to address the ongoing challenges of quantum software development. The importance of the topic motivated us to voice out a call for action to develop a readiness model that will help an organization assess its capability of migration from classic software engineering to quantum software engineering. The proposed model will be based on the existing multivocal literature, industrial empirical study, understanding of the process areas, challenging factors and enablers that could impact the quantum software engineering process. We believe that the proposed model will provide a roadmap for software development organizations to measure their readiness concerning to transformation from classic to quantum software engineering by suggesting best practices and highlighting important process areas, challenges, and enablers.}}
@ARTICLE{Weder_2020,title={Integrating Quantum Computing into Workflow Modeling and Execution},year={2020},author={Benjamin Weder and Benjamin Weder and Uwe Breitenbücher and Uwe Breitenbücher and Frank Leymann and Frank Leymann and Karoline Wild and Karoline Wild},doi={10.1109/ucc48980.2020.00046},pmid={null},pmcid={null},mag_id={3114370072},journal={null},abstract={Quantum computing has the potential to significantly impact many application domains, as several quantum algorithms are promising to solve problems more efficiently than possible on classical computers. However, various complex pre- and post-processing tasks have to be performed when executing a quantum circuit, which require immense mathematical and technical knowledge. For example, calculations on today's quantum computers are noisy and require an error mitigation task after the execution. Hence, integrating classical applications with quantum circuits is a difficult challenge. In this paper, we introduce a modeling extension for imperative workflow languages to enable the integration of quantum computations and ease the orchestration of classical applications and quantum circuits. Further, we show how the extension can be mapped to native modeling constructs of extended workflow languages to retain the portability of the workflows. We validate the practical feasibility of our approach by applying our proposed extension to BPMN and introduce Quantum4BPMN.}}
@ARTICLE{Kass_2022,title={Drivers and Inhibitors of Low Code Development Platform Adoption},year={2022},author={Sebastian Kass and Susanne Strahringer and Markus Westner},doi={10.1109/cbi54897.2022.00028},pmid={null},pmcid={null},mag_id={4312841245},journal={null},abstract={When done right, the use of low code development promises a significant competitive advantage in the software development process for organizations. Thus, multiple vendors have created low code development platforms to ease the use of low code development. However, current research on low code development platforms mainly focuses on the technological aspects of the platforms but not on their adoption. Hence, it remains unclear what drives and inhibits the adoption of low code development platforms. We conducted a literature review and identified thirteen factors that inhibit the adoption and seven factors that drive it. We structure these factors along with the diffusion of innovation framework that helps to disentangle drivers and inhibitors. As a result, we provide an initial explanation of the adoption of low code development platforms. Nevertheless, we conclude that existing research on the adoption of low code development platforms is not specific enough to understand the phenomenon substantially. Further, for some factors (e.g., cost), there is a disagreement in the academic literature on whether they are drivers or inhibitors. Hence, we identify gaps and derive avenues for future research.}}
@ARTICLE{Pérez‐Castillo_2021,title={Modelling Quantum Circuits with UML},year={2021},author={Ricardo Pérez‐Castillo and Ricardo Pérez-Castillo and Ricardo Pérez-Castillo and Luis Jiménez-Navajas and Luis Jiménez-Navajas and Mario Piattini and Mario Piattini and Mario Piattini},doi={10.1109/q-se52541.2021.00009},pmid={null},pmcid={null},mag_id={3182930651},journal={null},abstract={None of the quantum computing applications imagined will ever become a reality without quantum software. Quantum programmes have, to date, been coded with ad hoc techniques. Researchers in the field of quantum software engineering are, therefore, now demanding more systematic techniques and methods with which to produce software with sufficient quality. One of the challenges and lessons learned from classic software engineering is the need for high-level, abstract and technology-independent representations with which to design software before it is coded. This paper specifically addresses this challenge for quantum software design. Since UML is a well-proven modelling language that has been widely employed by industry for some time, we propose a UML extension for the representation of quantum algorithms. Our proposal comprises the definition of a UML profile based on various stereotypes that can be applied to the existing UML activity diagrams in order to represent quantum circuits. The advantage of this representation is that UML quantum circuits can be interrelated with other UML elements and diagrams, which will make it possible to represent various concerns and viewpoints of the so-called hybrid information systems. This will consequently enable classical and quantum aspects to be modelled together in integrated designs in a technological-agnostic manner that is already supported by a considerable number of existing software design tools.}}
@ARTICLE{Kahani_2019,title={Survey and classification of model transformation tools},year={2019},author={Nafıseh Kahani and Nafiseh Kahani and Mojtaba Bagherzadeh and Mojtaba Bagherzadeh and James R. Cordy and James R. Cordy and Juergen Dingel and Juergen Dingel and Dániel Varró and Dániel Varró},doi={10.1007/s10270-018-0665-6},pmid={null},pmcid={null},mag_id={2790851984},journal={Software and Systems Modeling},abstract={Model transformation lies at the very core of model-driven engineering, and a large number of model transformation languages and tools have been proposed over the last few years. These tools can be used to develop, transform, merge, exchange, compare, and verify models and metamodels. In this paper, we present a comprehensive catalog of existing metamodel-based transformation tools and compare them using a qualitative framework. We begin by organizing the 60 tools we identified into a general classification based on the transformation approach used. We then compare these tools using a number of particular facets, where each facet belongs to one of six different categories and may contain several attributes. The results of the study are discussed in detail and made publicly available in a companion website with a capability to search for tools using the specified facets as search criteria. Our study provides a thorough picture of the state-of-the-art in model transformation techniques and tools. Our results are potentially beneficial to many stakeholders in the modeling community, including practitioners, researchers, and transformation tool developers.}}
@ARTICLE{Alamin_2022,title={Developer discussion topics on the adoption and barriers of low code software development platforms},year={2022},author={Md Abdullah Al Alamin and Md Abdullah Al Alamin and Gias Uddin and Gias Uddin and Sanjay Malakar and Sanjay Malakar and Sadia Afroz and Sadia Afroz and Tameem Haider and Tameem Bin Haider and Anindya Iqbal and Anindya Iqbal},doi={10.1007/s10664-022-10244-0},pmid={36407813},pmcid={null},mag_id={4309382233},journal={Empirical Software Engineering},abstract={Low-code software development (LCSD) is an emerging approach to democratize application development for software practitioners from diverse backgrounds. LCSD platforms promote rapid application development with a drag-and-drop interface and minimal programming by hand. As it is a relatively new paradigm, it is vital to study developers’ difficulties when adopting LCSD platforms. Software engineers frequently use the online developer forum Stack Overflow (SO) to seek assistance with technical issues. We observe a growing body of LCSD-related posts in SO. This paper presents an empirical study of around 33K SO posts (questions + accepted answers) containing discussions of 38 popular LCSD platforms. We use Topic Modeling to determine the topics discussed in those posts. Additionally, we examine how these topics are spread across the various phases of the agile software development life cycle (SDLC) and which part of LCSD is the most popular and challenging. Our study offers several interesting findings. First, we find 40 LCSD topics that we group into five categories: Application Customization, Database and File Management, Platform Adoption, Platform Maintenance, and Third-party API Integration. Second, while the Application Customization (30%) and Data Storage (25%) topic categories are the most common, inquiries relating to several other categories (e.g., the Platform Adoption topic category) have gained considerable attention in recent years. Third, all topic categories are evolving rapidly, especially during the Covid-19 pandemic. Fourth, the How-type questions are prevalent in all topics, but the What-type and Why-type (i.e., detail information for clarification) questions are more prevalent in the Platform Adoption and Platform Maintenance category. Fifth, LCSD practitioners find topics related to Platform Query the most popular, while topics related to Message Queue and Library Dependency Management as the most difficult to get accepted answers to. Sixth, the Why-type and What-type questions and Agile Maintenance and Deployment phase are the most challenging among practitioners. The findings of this study have implications for all three LCSD stakeholders: LCSD platform vendors, LCSD developers/practitioners, Researchers, and Educators. Researchers and LCSD platform vendors can collaborate to improve different aspects of LCSD, such as better tutorial-based documentation, testing, and DevOps support.}}
@ARTICLE{Khan_2022,title={Software Architecture for Quantum Computing Systems - A Systematic Review},year={2022},author={Arif  Ali Khan and Arif Ali Khan and Aakash Ahmad and Aakash Ahmad and Muhammad Waseem and Muhammad Waseem and Peng Liang and Peng Liang and Mahdi Fahmideh and Mahdi Fahmideh and Tommi Mikkonen and Tommi Mikkonen and Pekka Abrahamsson and Pekka Abrahamsson},doi={10.2139/ssrn.4191449},pmid={null},pmcid={null},mag_id={4295860740},journal={Social Science Research Network},abstract={null}}
@ARTICLE{Stefano_2022,title={Towards Quantum-algorithms-as-a-service},year={2022},author={Manuel De Stefano and Manuel De Stefano and Dario Di Nucci and Dario Di Nucci and Fabio Palomba and Fabio Palomba and Davide Taibi and Davide Taibi and Andrea De Lucia and Andrea De Lucia},doi={10.1145/3549036.3562056},pmid={null},pmcid={null},mag_id={4308627555},journal={null},abstract={Quantum computing is an emerging field of high interest. Many companies have started to work on developing more powerful and stable quantum computers. However, developers still struggle to master the art of programming with a quantum computer. One of the major challenges faced is the integration of quantum parts of a system with the classical one. This paper proposes a novel development model called Quantum-Algorithms-as-a-Service (QAaaS). This new model aims to allow developers to abstract the quantum components away from the design of the software they are building. The model leverages Software-as-a-Service and Function-as-a-Service to support multiple quantum cloud providers and run their algorithms regardless of the underlying hardware.}}
@ARTICLE{Moin_2021,title={MDE4QAI: Towards Model-Driven Engineering for Quantum Artificial Intelligence},year={2021},author={Armin Moin and Armin Moin and Moharram Challenger and Moharram Challenger and Atta Badii and Atta Badii and Stephan Günnemann and Stephan Günnemann},doi={null},pmid={null},pmcid={null},mag_id={3178976436},journal={arXiv: Software Engineering},abstract={Over the past decade, Artificial Intelligence (AI) has provided enormous new possibilities and opportunities, but also new demands and requirements for software systems. In particular, Machine Learning (ML) has proven useful in almost every vertical application domain. Although other sub-disciplines of AI, such as intelligent agents and Multi-Agent Systems (MAS) did not become promoted to the same extent, they still possess the potential to be integrated into the mainstream technology stacks and ecosystems, for example, due to the ongoing prevalence of the Internet of Things (IoT) and smart Cyber-Physical Systems (CPS). However, in the decade ahead, an unprecedented paradigm shift from classical computing towards Quantum Computing (QC) is expected, with perhaps a quantum-classical hybrid model. We expect the Model-Driven Engineering (MDE) paradigm to be an enabler and a facilitator, when it comes to the quantum and the quantum-classical hybrid applications as it has already proven beneficial in the highly complex domains of IoT, smart CPS and AI with inherently heterogeneous hardware and software platforms, and APIs. This includes not only automated code generation, but also automated model checking and verification, as well as model analysis in the early design phases, and model-to-model transformations both at the design-time and at the runtime. In this paper, the vision is focused on MDE for Quantum AI, and a holistic approach integrating all of the above.}}
@ARTICLE{Sánchez_2021,title={On the Definition of Quantum Programming Modules},year={2021},author={Pedro Sánchez and Pedro Sánchez and Diego Alonso and Diego Alonso},doi={10.3390/app11135843},pmid={null},pmcid={null},mag_id={3173149466},journal={Applied Sciences},abstract={There are no doubts that quantum programming and, in general, quantum computing, is one of the most promising areas within computer science and one of the areas where most expectations are being placed in recent years. Although the days when reliable and affordable quantum computers will be available is still a long way off, the explosion of programming languages for quantum programming has grown exponentially in recent years. The software engineering community has been quick to react to the need to adopt and adapt well-known tools and methods for software development, and for the design of new ones tailored to this new programming paradigm. However, many key aspects for its success depend on the establishment of an appropriate conceptual framework for the conception and design of quantum programs. This article discusses the concept of module, key in the software engineering discipline, and establishes initial criteria for determining the cohesion and coupling levels of a module in the field of quantum programming as a first step towards a sound quantum software engineering. As detailed in the article, the conceptual differences between classical and quantum computing are so pronounced that the translation of classical concepts to the new programming approach is not straightforward.}}
